// source: proto/management.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_wrappers_pb = require('./wrappers_pb.js');
goog.object.extend(proto, proto_wrappers_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
goog.exportSymbol('proto.zdautomotive.protobuf.ZDService', null, global);
goog.exportSymbol('proto.zdautomotive.protobuf.ZDService.SERVICE_STATUS', null, global);
goog.exportSymbol('proto.zdautomotive.protobuf.ZDServiceRequest', null, global);
goog.exportSymbol('proto.zdautomotive.protobuf.ZDServiceRequestResult', null, global);
goog.exportSymbol('proto.zdautomotive.protobuf.ZDServiceSubscriber', null, global);
goog.exportSymbol('proto.zdautomotive.protobuf.ZDServiceSubscriber.SUBSCRIBER_TYPE', null, global);
goog.exportSymbol('proto.zdautomotive.protobuf.ZDSubscriberStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zdautomotive.protobuf.ZDServiceSubscriber = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zdautomotive.protobuf.ZDServiceSubscriber.repeatedFields_, null);
};
goog.inherits(proto.zdautomotive.protobuf.ZDServiceSubscriber, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zdautomotive.protobuf.ZDServiceSubscriber.displayName = 'proto.zdautomotive.protobuf.ZDServiceSubscriber';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zdautomotive.protobuf.ZDSubscriberStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.zdautomotive.protobuf.ZDSubscriberStatus.repeatedFields_, null);
};
goog.inherits(proto.zdautomotive.protobuf.ZDSubscriberStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zdautomotive.protobuf.ZDSubscriberStatus.displayName = 'proto.zdautomotive.protobuf.ZDSubscriberStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zdautomotive.protobuf.ZDService = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zdautomotive.protobuf.ZDService, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zdautomotive.protobuf.ZDService.displayName = 'proto.zdautomotive.protobuf.ZDService';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zdautomotive.protobuf.ZDServiceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zdautomotive.protobuf.ZDServiceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zdautomotive.protobuf.ZDServiceRequest.displayName = 'proto.zdautomotive.protobuf.ZDServiceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zdautomotive.protobuf.ZDServiceRequestResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zdautomotive.protobuf.ZDServiceRequestResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zdautomotive.protobuf.ZDServiceRequestResult.displayName = 'proto.zdautomotive.protobuf.ZDServiceRequestResult';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zdautomotive.protobuf.ZDServiceSubscriber.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zdautomotive.protobuf.ZDServiceSubscriber.prototype.toObject = function(opt_includeInstance) {
  return proto.zdautomotive.protobuf.ZDServiceSubscriber.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zdautomotive.protobuf.ZDServiceSubscriber} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zdautomotive.protobuf.ZDServiceSubscriber.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    servicetypeList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zdautomotive.protobuf.ZDServiceSubscriber}
 */
proto.zdautomotive.protobuf.ZDServiceSubscriber.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zdautomotive.protobuf.ZDServiceSubscriber;
  return proto.zdautomotive.protobuf.ZDServiceSubscriber.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zdautomotive.protobuf.ZDServiceSubscriber} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zdautomotive.protobuf.ZDServiceSubscriber}
 */
proto.zdautomotive.protobuf.ZDServiceSubscriber.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.zdautomotive.protobuf.ZDServiceSubscriber.SUBSCRIBER_TYPE} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var values = /** @type {!Array<!proto.zdautomotive.protobuf.SERVICE_TYPE>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addServicetype(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zdautomotive.protobuf.ZDServiceSubscriber.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zdautomotive.protobuf.ZDServiceSubscriber.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zdautomotive.protobuf.ZDServiceSubscriber} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zdautomotive.protobuf.ZDServiceSubscriber.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getServicetypeList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.zdautomotive.protobuf.ZDServiceSubscriber.SUBSCRIBER_TYPE = {
  OBSERVER: 0,
  PROVIDER: 1
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.zdautomotive.protobuf.ZDServiceSubscriber.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zdautomotive.protobuf.ZDServiceSubscriber} returns this
 */
proto.zdautomotive.protobuf.ZDServiceSubscriber.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SUBSCRIBER_TYPE type = 2;
 * @return {!proto.zdautomotive.protobuf.ZDServiceSubscriber.SUBSCRIBER_TYPE}
 */
proto.zdautomotive.protobuf.ZDServiceSubscriber.prototype.getType = function() {
  return /** @type {!proto.zdautomotive.protobuf.ZDServiceSubscriber.SUBSCRIBER_TYPE} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.zdautomotive.protobuf.ZDServiceSubscriber.SUBSCRIBER_TYPE} value
 * @return {!proto.zdautomotive.protobuf.ZDServiceSubscriber} returns this
 */
proto.zdautomotive.protobuf.ZDServiceSubscriber.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated SERVICE_TYPE serviceType = 3;
 * @return {!Array<!proto.zdautomotive.protobuf.SERVICE_TYPE>}
 */
proto.zdautomotive.protobuf.ZDServiceSubscriber.prototype.getServicetypeList = function() {
  return /** @type {!Array<!proto.zdautomotive.protobuf.SERVICE_TYPE>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<!proto.zdautomotive.protobuf.SERVICE_TYPE>} value
 * @return {!proto.zdautomotive.protobuf.ZDServiceSubscriber} returns this
 */
proto.zdautomotive.protobuf.ZDServiceSubscriber.prototype.setServicetypeList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.zdautomotive.protobuf.SERVICE_TYPE} value
 * @param {number=} opt_index
 * @return {!proto.zdautomotive.protobuf.ZDServiceSubscriber} returns this
 */
proto.zdautomotive.protobuf.ZDServiceSubscriber.prototype.addServicetype = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.zdautomotive.protobuf.ZDServiceSubscriber} returns this
 */
proto.zdautomotive.protobuf.ZDServiceSubscriber.prototype.clearServicetypeList = function() {
  return this.setServicetypeList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.zdautomotive.protobuf.ZDSubscriberStatus.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zdautomotive.protobuf.ZDSubscriberStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.zdautomotive.protobuf.ZDSubscriberStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zdautomotive.protobuf.ZDSubscriberStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zdautomotive.protobuf.ZDSubscriberStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serviceList: jspb.Message.toObjectList(msg.getServiceList(),
    proto.zdautomotive.protobuf.ZDService.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zdautomotive.protobuf.ZDSubscriberStatus}
 */
proto.zdautomotive.protobuf.ZDSubscriberStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zdautomotive.protobuf.ZDSubscriberStatus;
  return proto.zdautomotive.protobuf.ZDSubscriberStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zdautomotive.protobuf.ZDSubscriberStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zdautomotive.protobuf.ZDSubscriberStatus}
 */
proto.zdautomotive.protobuf.ZDSubscriberStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.zdautomotive.protobuf.ZDService;
      reader.readMessage(value,proto.zdautomotive.protobuf.ZDService.deserializeBinaryFromReader);
      msg.addService(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zdautomotive.protobuf.ZDSubscriberStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zdautomotive.protobuf.ZDSubscriberStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zdautomotive.protobuf.ZDSubscriberStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zdautomotive.protobuf.ZDSubscriberStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServiceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.zdautomotive.protobuf.ZDService.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.zdautomotive.protobuf.ZDSubscriberStatus.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zdautomotive.protobuf.ZDSubscriberStatus} returns this
 */
proto.zdautomotive.protobuf.ZDSubscriberStatus.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ZDService service = 2;
 * @return {!Array<!proto.zdautomotive.protobuf.ZDService>}
 */
proto.zdautomotive.protobuf.ZDSubscriberStatus.prototype.getServiceList = function() {
  return /** @type{!Array<!proto.zdautomotive.protobuf.ZDService>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.zdautomotive.protobuf.ZDService, 2));
};


/**
 * @param {!Array<!proto.zdautomotive.protobuf.ZDService>} value
 * @return {!proto.zdautomotive.protobuf.ZDSubscriberStatus} returns this
*/
proto.zdautomotive.protobuf.ZDSubscriberStatus.prototype.setServiceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.zdautomotive.protobuf.ZDService=} opt_value
 * @param {number=} opt_index
 * @return {!proto.zdautomotive.protobuf.ZDService}
 */
proto.zdautomotive.protobuf.ZDSubscriberStatus.prototype.addService = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.zdautomotive.protobuf.ZDService, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.zdautomotive.protobuf.ZDSubscriberStatus} returns this
 */
proto.zdautomotive.protobuf.ZDSubscriberStatus.prototype.clearServiceList = function() {
  return this.setServiceList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zdautomotive.protobuf.ZDService.prototype.toObject = function(opt_includeInstance) {
  return proto.zdautomotive.protobuf.ZDService.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zdautomotive.protobuf.ZDService} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zdautomotive.protobuf.ZDService.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zdautomotive.protobuf.ZDService}
 */
proto.zdautomotive.protobuf.ZDService.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zdautomotive.protobuf.ZDService;
  return proto.zdautomotive.protobuf.ZDService.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zdautomotive.protobuf.ZDService} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zdautomotive.protobuf.ZDService}
 */
proto.zdautomotive.protobuf.ZDService.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.zdautomotive.protobuf.SERVICE_TYPE} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!proto.zdautomotive.protobuf.ZDService.SERVICE_STATUS} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zdautomotive.protobuf.ZDService.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zdautomotive.protobuf.ZDService.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zdautomotive.protobuf.ZDService} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zdautomotive.protobuf.ZDService.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.zdautomotive.protobuf.ZDService.SERVICE_STATUS = {
  DISABLED: 0,
  ENABLED: 1
};

/**
 * optional SERVICE_TYPE type = 1;
 * @return {!proto.zdautomotive.protobuf.SERVICE_TYPE}
 */
proto.zdautomotive.protobuf.ZDService.prototype.getType = function() {
  return /** @type {!proto.zdautomotive.protobuf.SERVICE_TYPE} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.zdautomotive.protobuf.SERVICE_TYPE} value
 * @return {!proto.zdautomotive.protobuf.ZDService} returns this
 */
proto.zdautomotive.protobuf.ZDService.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional SERVICE_STATUS status = 2;
 * @return {!proto.zdautomotive.protobuf.ZDService.SERVICE_STATUS}
 */
proto.zdautomotive.protobuf.ZDService.prototype.getStatus = function() {
  return /** @type {!proto.zdautomotive.protobuf.ZDService.SERVICE_STATUS} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.zdautomotive.protobuf.ZDService.SERVICE_STATUS} value
 * @return {!proto.zdautomotive.protobuf.ZDService} returns this
 */
proto.zdautomotive.protobuf.ZDService.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zdautomotive.protobuf.ZDServiceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.zdautomotive.protobuf.ZDServiceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zdautomotive.protobuf.ZDServiceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zdautomotive.protobuf.ZDServiceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    session: jspb.Message.getFieldWithDefault(msg, 2, ""),
    data: (f = msg.getData()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    createtime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    expiretime: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zdautomotive.protobuf.ZDServiceRequest}
 */
proto.zdautomotive.protobuf.ZDServiceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zdautomotive.protobuf.ZDServiceRequest;
  return proto.zdautomotive.protobuf.ZDServiceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zdautomotive.protobuf.ZDServiceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zdautomotive.protobuf.ZDServiceRequest}
 */
proto.zdautomotive.protobuf.ZDServiceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.zdautomotive.protobuf.SERVICE_TYPE} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSession(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatetime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpiretime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zdautomotive.protobuf.ZDServiceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zdautomotive.protobuf.ZDServiceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zdautomotive.protobuf.ZDServiceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zdautomotive.protobuf.ZDServiceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSession();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getCreatetime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getExpiretime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional SERVICE_TYPE type = 1;
 * @return {!proto.zdautomotive.protobuf.SERVICE_TYPE}
 */
proto.zdautomotive.protobuf.ZDServiceRequest.prototype.getType = function() {
  return /** @type {!proto.zdautomotive.protobuf.SERVICE_TYPE} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.zdautomotive.protobuf.SERVICE_TYPE} value
 * @return {!proto.zdautomotive.protobuf.ZDServiceRequest} returns this
 */
proto.zdautomotive.protobuf.ZDServiceRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string session = 2;
 * @return {string}
 */
proto.zdautomotive.protobuf.ZDServiceRequest.prototype.getSession = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zdautomotive.protobuf.ZDServiceRequest} returns this
 */
proto.zdautomotive.protobuf.ZDServiceRequest.prototype.setSession = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Any data = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.zdautomotive.protobuf.ZDServiceRequest.prototype.getData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.zdautomotive.protobuf.ZDServiceRequest} returns this
*/
proto.zdautomotive.protobuf.ZDServiceRequest.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zdautomotive.protobuf.ZDServiceRequest} returns this
 */
proto.zdautomotive.protobuf.ZDServiceRequest.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zdautomotive.protobuf.ZDServiceRequest.prototype.hasData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 createTime = 4;
 * @return {number}
 */
proto.zdautomotive.protobuf.ZDServiceRequest.prototype.getCreatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.zdautomotive.protobuf.ZDServiceRequest} returns this
 */
proto.zdautomotive.protobuf.ZDServiceRequest.prototype.setCreatetime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 expireTime = 5;
 * @return {number}
 */
proto.zdautomotive.protobuf.ZDServiceRequest.prototype.getExpiretime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.zdautomotive.protobuf.ZDServiceRequest} returns this
 */
proto.zdautomotive.protobuf.ZDServiceRequest.prototype.setExpiretime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zdautomotive.protobuf.ZDServiceRequestResult.prototype.toObject = function(opt_includeInstance) {
  return proto.zdautomotive.protobuf.ZDServiceRequestResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zdautomotive.protobuf.ZDServiceRequestResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zdautomotive.protobuf.ZDServiceRequestResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.zdautomotive.protobuf.ZDServiceRequest.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto_wrappers_pb.ZDResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zdautomotive.protobuf.ZDServiceRequestResult}
 */
proto.zdautomotive.protobuf.ZDServiceRequestResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zdautomotive.protobuf.ZDServiceRequestResult;
  return proto.zdautomotive.protobuf.ZDServiceRequestResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zdautomotive.protobuf.ZDServiceRequestResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zdautomotive.protobuf.ZDServiceRequestResult}
 */
proto.zdautomotive.protobuf.ZDServiceRequestResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.zdautomotive.protobuf.ZDServiceRequest;
      reader.readMessage(value,proto.zdautomotive.protobuf.ZDServiceRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto_wrappers_pb.ZDResponse;
      reader.readMessage(value,proto_wrappers_pb.ZDResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zdautomotive.protobuf.ZDServiceRequestResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zdautomotive.protobuf.ZDServiceRequestResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zdautomotive.protobuf.ZDServiceRequestResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zdautomotive.protobuf.ZDServiceRequestResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.zdautomotive.protobuf.ZDServiceRequest.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_wrappers_pb.ZDResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ZDServiceRequest request = 1;
 * @return {?proto.zdautomotive.protobuf.ZDServiceRequest}
 */
proto.zdautomotive.protobuf.ZDServiceRequestResult.prototype.getRequest = function() {
  return /** @type{?proto.zdautomotive.protobuf.ZDServiceRequest} */ (
    jspb.Message.getWrapperField(this, proto.zdautomotive.protobuf.ZDServiceRequest, 1));
};


/**
 * @param {?proto.zdautomotive.protobuf.ZDServiceRequest|undefined} value
 * @return {!proto.zdautomotive.protobuf.ZDServiceRequestResult} returns this
*/
proto.zdautomotive.protobuf.ZDServiceRequestResult.prototype.setRequest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zdautomotive.protobuf.ZDServiceRequestResult} returns this
 */
proto.zdautomotive.protobuf.ZDServiceRequestResult.prototype.clearRequest = function() {
  return this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zdautomotive.protobuf.ZDServiceRequestResult.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ZDResponse response = 2;
 * @return {?proto.zdautomotive.protobuf.ZDResponse}
 */
proto.zdautomotive.protobuf.ZDServiceRequestResult.prototype.getResponse = function() {
  return /** @type{?proto.zdautomotive.protobuf.ZDResponse} */ (
    jspb.Message.getWrapperField(this, proto_wrappers_pb.ZDResponse, 2));
};


/**
 * @param {?proto.zdautomotive.protobuf.ZDResponse|undefined} value
 * @return {!proto.zdautomotive.protobuf.ZDServiceRequestResult} returns this
*/
proto.zdautomotive.protobuf.ZDServiceRequestResult.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zdautomotive.protobuf.ZDServiceRequestResult} returns this
 */
proto.zdautomotive.protobuf.ZDServiceRequestResult.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zdautomotive.protobuf.ZDServiceRequestResult.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.zdautomotive.protobuf);
